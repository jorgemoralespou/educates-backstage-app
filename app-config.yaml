app:
  title: Educates Backstage App
  baseUrl: http://localhost:3000

organization:
  name: Educates

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
    # # config options: https://node-postgres.com/apis/client
    # client: pg
    # connection:
    #   host: ${POSTGRES_HOST}
    #   port: ${POSTGRES_PORT}
    #   user: ${POSTGRES_USER}
    #   password: ${POSTGRES_PASSWORD}

  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
      token: ${GITHUB_TOKEN}
#    # ## Example for how to add your GitHub Enterprise instance using the API:
#    # - host: ghe.example.net
#    #   apiBaseUrl: https://ghe.example.net/api/v3
#    #   token: ${GHE_TOKEN}

proxy:
  endpoints:

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  # providers: {}
  environment: development
  providers:
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow:
        [
          Component,
          System,
          API,
          Resource,
          Location,
          Workshop,
          TrainingPortal,
          Template,
        ]
  # In production, we probably want to discover entities from github repositories and orgs,
  # for development we can use local files
  providers:
    # github:
    #   jorgemoralespou:
    #     organization: 'jorgemoralespou' # string
    #     catalogPath: '/catalog-info.yaml' # string
    #     filters:
    #       branch: 'develop' # string
    #       repository: 'labs-educates-showcase' # Regex
    #     schedule: # optional; same options as in TaskScheduleDefinition
    #       # supports cron, ISO duration, "human duration" as used in code
    #       frequency: { minutes: 30 }
    #       # supports ISO duration, "human duration" as used in code
    #       timeout: { minutes: 3 }
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    # # educates
    # # In production, we probably want to discover entities from github repositories and orgs,
    # # for development we can use local files
    - type: file
      target: ../../examples/educates/entities.yaml
      rules:
        - allow: [Workshop, TrainingPortal]
    # - type: url
    #   target: https://github.com/jorgemoralespou/labs-educates-showcase/blob/develop/catalog-info.yaml
    #   rules:
    #     - allow: [Workshop, TrainingPortal]
    - type: file
      target: ../../examples/educates/templates/template.yaml
      rules:
        - allow: [Template]
